// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  ADMIN
  RESIDENT
}

enum Status {
  ACTIVO
  SUSPENDIDO
  INACTIVO
}

enum PaymentType {
  PAGO_MENSUALIDAD
  PAGO_MANTENIMIENTO
  OTROS
}

// Tabla de usuarios (mantenida como está)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(RESIDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con compañeros si es admin
  companeros Companeros[]

  @@map("users")
}

// Tabla de Torres (edificios)
model Torres {
  id_torre        String   @id @default(cuid())
  letra           String   @unique
  nivel           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaciones
  departamentos   Departamentos[]

  @@map("torres")
}

// Tabla de Departamentos
model Departamentos {
  id_departamento String   @id @default(cuid())
  no_departamento String
  id_torre        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaciones
  torre           Torres      @relation(fields: [id_torre], references: [id_torre], onDelete: Cascade)
  companeros      Companeros[]

  @@unique([no_departamento, id_torre])
  @@map("departamentos")
}

// Tabla de Compañeros (residentes)
model Companeros {
  id_companero        String   @id @default(cuid())
  nombre              String
  apellidos           String
  fecha_nacimiento    DateTime?
  no_personas         Int?
  no_des_per          Int?     @default(0) // número de personas discapacitadas
  recibo_apoyo        String?  @db.VarChar(10)
  no_apoyo            Int?
  id_departamento     String?
  estatus             Status   @default(ACTIVO)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  createdById         String

  // Relaciones
  departamento        Departamentos? @relation(fields: [id_departamento], references: [id_departamento], onDelete: SetNull)
  createdBy           User           @relation(fields: [createdById], references: [id])
  info_financiero     Info_Financiero?
  financieros         Financieros[]

  @@map("companeros")
}

// Tabla de Info_Financiero (información INVI)
model Info_Financiero {
  id_flux             String    @id @default(cuid())
  excelente           String?   @db.VarChar(10)
  aport               String?   @db.VarChar(10)
  deuda               String?   @db.VarChar(10)
  estacionamiento     String?   @db.VarChar(10)
  aportacion          String?   @db.VarChar(10)
  aportacion_deuda    String?   @db.VarChar(10)
  apoyo_renta         String?   @db.VarChar(10)
  comentarios         String?   @db.Text
  id_companeros       String    @unique
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relación con compañero
  companero           Companeros @relation(fields: [id_companeros], references: [id_companero], onDelete: Cascade)

  @@map("info_financiero")
}

// Tabla de Financieros (pagos y transacciones)
model Financieros {
  id_financieros      String      @id @default(cuid())
  validez             String?     @db.VarChar(255)
  aportaciones        String?     @db.VarChar(255)
  facturas            String?     @db.VarChar(255)
  salidas             String?     @db.VarChar(255)
  id_companeros       String
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  // Relación con compañero
  companero           Companeros  @relation(fields: [id_companeros], references: [id_companero], onDelete: Cascade)

  @@map("financieros")
}
